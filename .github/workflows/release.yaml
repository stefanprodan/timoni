name: release

on:
  push:
    tags: [ 'v*' ]

permissions:
  contents: read

jobs:
  goreleaser:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      version: ${{ steps.hash.outputs.version }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Setup Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: 1.22.x
          cache: false
      - name: Setup Syft
        uses: anchore/sbom-action/download-syft@d94f46e13c6c62f59525ac9a1e147a99dc0b9bf5 # v0.17.0
      - name: Run GoReleaser
        id: run-goreleaser
        uses: goreleaser/goreleaser-action@286f3b13b1b49da4ac219696163fb8c1c93e1200 # v6.0.0
        with:
          version: latest
          args: release --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
      - name: Generate SLSA subject
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail

          hashes=$(echo $ARTIFACTS | jq --raw-output '.[] | {name, "digest": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join("  ") | sub("^sha256:";"")' | base64 -w0)
          if test "$hashes" = ""; then # goreleaser < v1.13.0
            checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
            hashes=$(cat $checksum_file | base64 -w0)
          fi
          echo "hashes=$hashes" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

  publish-artifacts:
    needs: [goreleaser]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Setup Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
      - name: Setup Timoni
        uses: ./actions/setup
      - name: Login to GHCR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Version info
        id: info
        run: |
          VERSION=$(timoni -v | awk '{ print $NF }')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      - name: Push minimal module
        run: |
          timoni mod push ./examples/minimal oci://ghcr.io/stefanprodan/timoni/minimal \
          -v ${{ steps.info.outputs.version }} --latest \
          -a 'org.opencontainers.image.licenses=Apache-2.0' \
          -a 'org.opencontainers.image.source=https://github.com/stefanprodan/timoni'  \
          -a 'org.opencontainers.image.description=A minimal timoni.sh module.' \
          -a 'org.opencontainers.image.documentation=https://timoni.sh' \
          --sign cosign
      - name: Push blueprint starter
        run: |
          timoni mod push ./blueprints/starter oci://ghcr.io/stefanprodan/timoni/blueprints/starter \
          -v ${{ steps.info.outputs.version }} --latest \
          -a 'org.opencontainers.image.licenses=Apache-2.0' \
          -a 'org.opencontainers.image.source=https://github.com/stefanprodan/timoni'  \
          -a 'org.opencontainers.image.description=Get started blueprint for timoni.sh modules.' \
          -a 'org.opencontainers.image.documentation=https://timoni.sh' \
          --sign cosign
      - name: Push schemas
        run: |
          timoni artifact push oci://ghcr.io/stefanprodan/timoni/schemas \
          -f ./schemas -t ${{ steps.info.outputs.version }} -t latest \
          -a 'org.opencontainers.image.licenses=Apache-2.0' \
          -a 'org.opencontainers.image.source=https://github.com/stefanprodan/timoni' \
          -a 'org.opencontainers.image.description=Timoni CUE schemas.' \
          -a 'org.opencontainers.image.documentation=https://timoni.sh' \
          --content-type="cue.mod/pkg" \
          --sign cosign

  provenance:
    needs: [goreleaser]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      provenance-name: "timoni_${{ needs.goreleaser.outputs.version }}_provenance.intoto.jsonl"
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      upload-assets: true # upload to a new release
